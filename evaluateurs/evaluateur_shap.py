# -*- coding: utf-8 -*-
"""Evaluateur_SHAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H62P9SIvnI_9lzosP1aqcCZtK4govR7n
"""

import numpy as np
import pandas as pd
from sklearn import datasets, tree
from sklearn.model_selection import train_test_split
import shap
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor
from tensorflow import keras 
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
#from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
#import tensorflow_datasets as tfds
from keras import optimizers
import warnings
warnings.filterwarnings("ignore")


#build NN model
def create_model():
	# create model
  model = Sequential()
  model.add(Dense(50, activation='relu'))
  model.add(Dense(100, activation='relu'))
  model.add(Dense(50, activation='relu'))
  model.add(Dense(1))
 #model.compile(loss="categorical_crossentropy", optimizer='keras.optimizers.RMSprop()', metrics=["accuracy"])
  model.compile(loss='mean_squared_error', optimizer='adam')
  return model

#----------------------------------------------------------------------------------------------------------------#

def get_modele(modele, train_data, train_labels, test_data):
    # Modele et explicateur
    if (modele == "Arbre"):
        model = tree.DecisionTreeClassifier().fit(train_data,y=train_labels)
        shap_values = shap.TreeExplainer(model).shap_values(test_data)
    elif (modele == "Régression Logistique"):
        model = LogisticRegression().fit(train_data, train_labels)
        shap_values = shap.KernelExplainer(model.predict_proba,train_data).shap_values(test_data)
    elif (modele == "KNN"):
        model = KNeighborsClassifier(n_neighbors=5).fit(train_data, train_labels)
        shap_values = shap.KernelExplainer(model.predict_proba,train_data).shap_values(test_data)
    elif (modele == "Random Forest"):
        model = RandomForestClassifier().fit(train_data, train_labels)
        shap_values = shap.TreeExplainer(model).shap_values(test_data)
    elif (modele == "SVM"):
        model = SVC(probability=True).fit(train_data, train_labels)
        shap_values = shap.KernelExplainer(model.predict_proba,train_data).shap_values(test_data)
    else: 
        return("Ce nom de modèle n'est pas pris en charge")
    
    return model, shap_values

def eval_shap(data, y, feature_names, nb_tw, modele):
    
    train_data, test_data, train_labels, test_labels = train_test_split(data, y, test_size=0.3, random_state=1)

    model, shap_values = get_modele(modele, train_data, train_labels, test_data)
    
    nb_diff = 0 
    n_test = len(test_labels)
    j = 0
    for i in range (0, n_test) : 
      list_tuples =[(j, abs(i)) for i, j in zip(shap_values[0][i],feature_names)]
      list_tuples.sort(key=lambda tup: tup[1], reverse=True)
      attributes =[x[0] for x in list_tuples]
      #On prédit la valeur de l'individu
      pred_before = model.predict([data[i,:]])

      #utw = untrustworthy
      #n : nombre de variables explicatives
      n = len(attributes)

      utw_names = attributes[nb_tw:n]

      data2 = np.copy(data)
      data2 = pd.DataFrame(data2, columns=feature_names)
      data2 = np.array(data2.drop(columns=utw_names))

      train_data2, test_data2, train_labels, test_labels = train_test_split(data2, y, test_size=0.3, random_state=1)
      model2, _ = get_modele(modele, train_data2, train_labels, test_data2)
      pred_after = model2.predict([data2[i,:]])


      if ((pred_after-pred_before) != 0):
        nb_diff = nb_diff + 1
    #print("Bonnes explicabilités : {} sur {}".format(n_test-nb_diff, n_test))

    return(nb_diff/n_test)